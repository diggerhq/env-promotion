name: Api CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: cd src; go build -v
      
    - name: Test
      run: cd src; go test -v

      
  deploy_to_dev:
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    steps:
    - name: digger plan run
      uses: diggerhq/digger@env-promo-demo
      with:
        mode: manual
        command: "digger plan"
        project: "dev"
        setup-aws: true
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        digger-token: ${{ secrets.DIGGER_TOKEN }}
        digger-organisation: digger
        digger-hostname: https://cloud.digger.dev/
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DIGGER_GITHUB_TOKEN: ${{ secrets.DIGGER_GITHUB_TOKEN }}
        ENV_NAME: ${{ vars.ENV_NAME }}

    - name: digger apply run
      uses: diggerhq/digger@env-promo-demo
      with:
        mode: manual
        command: "digger apply"
        project: "dev"
        setup-aws: true
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        digger-token: ${{ secrets.DIGGER_TOKEN }}
        digger-organisation: digger
        digger-hostname: https://cloud.digger.dev/
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DIGGER_GITHUB_TOKEN: ${{ secrets.DIGGER_GITHUB_TOKEN }}
        ENV_NAME: ${{ vars.ENV_NAME }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_REGION: eu-west-1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: demo-web-dev
        IMAGE_TAG: latest
      run: |
        cd src
        export COMMIT_SHA=$(git rev-parse --short HEAD)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg COMMIT_SHA=${COMMIT_SHA} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: deploy_to_dev
    if: github.event_name != 'pull_request'
    environment: prod
    steps:
    - name: digger plan run
      uses: diggerhq/digger@env-promo-demo
      with:
        mode: manual
        command: "digger plan"
        project: "prod"
        setup-aws: true
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        digger-token: ${{ secrets.DIGGER_TOKEN }}
        digger-organisation: digger
        digger-hostname: https://cloud.digger.dev/
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DIGGER_GITHUB_TOKEN: ${{ secrets.DIGGER_GITHUB_TOKEN }}
        ENV_NAME: ${{ vars.ENV_NAME }}

    - name: digger apply run
      uses: diggerhq/digger@env-promo-demo
      with:
        mode: manual
        command: "digger apply"
        project: "prod"
        setup-aws: true
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        digger-token: ${{ secrets.DIGGER_TOKEN }}
        digger-organisation: digger
        digger-hostname: https://cloud.digger.dev/
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DIGGER_GITHUB_TOKEN: ${{ secrets.DIGGER_GITHUB_TOKEN }}
        ENV_NAME: ${{ vars.ENV_NAME }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_REGION: eu-west-1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: demo-web-prod
        IMAGE_TAG: latest
      run: |
        cd src
        export COMMIT_SHA=$(git rev-parse --short HEAD)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg COMMIT_SHA=${COMMIT_SHA} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
